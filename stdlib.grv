struct ArrayType {
    _: int8;
    def push(item: any) -> null {
        // print(*(self._));
        // print("x", self._);
        // print(gravox_dump_heap());
        _array_push(*(self._), item);
    }
    def get(n: int8) -> any {
        return _get_nth_element(self.to_array(), n);
    }
    def to_array() -> array {
        return *(self._);
    }
    def len() -> int8 {
        return len(self.to_array());
    }
}

def Array(items: array) -> ArrayType {
    let _x: array; // assign on heap
    _x = items;
    // ThisDoesntExist("hi", &_x);
    let x: ArrayType;
    x._ = &_x;
    return x;
}

struct StringType {
    _: int8;
    def split(separator: string) -> array {
        return split(self.to_string(), separator);
    }
    def to_string() -> string {
        return *(self._);
    }
    def len() -> int8 {
        return len(self.to_string());
    }
}

def String(value: string) -> StringType {
    let _x: string; // assign on heap
    _x = value;
    let x: StringType;
    x._ = &_x;
    return x;
}

struct Fs {
    def write(file_name: string, contents: string) -> int8 {
        return _file_exec(file_name, "w+", contents);
    }
    def read(file_name: string) -> string {
        return _file_exec(file_name, "r", null);
    }
    def exists(path: string) -> int8 {
        return _file_exec(path, "e", null);
    }
}

struct Json {
    def load(value: string) -> any {
        return _json_exec("load", value);
    }
    def dump(object: any) -> string {
        return _json_exec("dump", object);
    }
}

let fs: Fs;
let json: Json;
